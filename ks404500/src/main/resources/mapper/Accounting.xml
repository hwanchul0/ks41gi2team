<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ksmart41_teamtest.mapper.AccountingMapper">

	<resultMap type="GetInvoiceInfo" id="GetInvoiceInfoResultMap">
		<result column="mainBusinessCode"				property="mainBusinessCode"/>
		<result column="businessName"				property="businessName"/>
		<result column="contractManageCode"				property="contractManageCode"/>

	</resultMap>

	<!--유경 : 세금계산서 발행화면- 계약내용 조회  -->
	<select id="getAddByBizInvoice" resultType="GetInvoiceInfo" resultMap="GetInvoiceInfoResultMap">
		SELECT
			main.mainBusinessCode,
	        biz.businessName,
	        biz.clientId,
	        biz.businessRepresentativeName,
	        biz.businessNumber,
	        biz.businessAddr,
	        biz.businessEmail,
	        biz.businessManagerEmail,
	        biz.businessType1,
	        biz.businessType2,
	        con.serviceCode,
	        con.serviceAmount,
	        con.servicePeriod,
	        s.serviceName,
	        con.slipNumber,
	        con.serviceRegistrationDate,
	        con.serviceTotalPrice,
	        round(con.serviceTotalPrice / 1.1, 0) AS nontax,
	        round(con.serviceTotalPrice /1.1 * 0.1, 0) AS tax,
	        I.invoiceCode,
	        con.contractManageCode
		FROM
			k0_invoice AS I
		right JOIN
			k2_sw_contractRequest AS con
		ON
			I.contractManageCode = con.contractManageCode
		INNER JOIN
			k0_sw_mainBusinessCodeManagement AS main
		on
			con.mainBusinessCode = main.mainBusinessCode
		INNER JOIN
			k0_sw_businessRegistration AS biz
		ON
			biz.businessRegistrationCode = main.businessRegistrationCode
		INNER JOIN
			k2_sw_serviceManagement AS s
		ON
			s.serviceCode = con.serviceCode
		WHERE con.contractManageCode IS NOT NULL
		AND
			I.invoiceCode IS NULL
		ORDER BY (I.invoiceCode IS NOT NULL)
		      	 , I.invoiceCode DESC
	</select>
	
	
	<!--개발사 세금계산서 등록시 코드 증가  -->
	<select id="getInvoiceCode" resultType="InvoiceList">
	SELECT CONCAT('code_',replace(CURDATE(),'-',''),'_',(SELECT LPAD(max(SUBSTRING((invoiceCode),15,3))+1,3,'0') FROM k0_invoice )) as addInvoiceCode

	</select>
	
	<!-- 개발사 세금계산서 등록시  세부발행 코드 증가   -->
	<select id="getInvoiceDetailCode" resultType="InvoiceList">
		SELECT
		CONCAT('detail_',max(substring(invoiceDetailCode,8,1))+1) as invoiceNewDetailCode
		FROM
		k0_invoiceDetail;
	</select>
	
	<!-- 개발사 세금계산서 등록  -->
	<insert id="addInvoiceByContract" parameterType="InvoiceList">
	INSERT INTO k0_invoice
		(invoiceCode,invoiceType,invoiceRegDate, 
		invoiceSupplyBizNumber,invoiceSupplyNumber, 
		invoiceSupply,invoiceSupplyName,invoiceSupplyAddr,
		invoiceSupplyType1,invoiceSupplyType2,invoiceSupplyEmail, 
		mainBusinessCodeDemand,invoiceDemandBizNumber,invoiceDemandNumber, 
		invoiceDemand,invoiceDemandName,invoiceDemandAddr, 
		invoiceDemandType1,invoiceDemandType2,invoiceDemandEmail1, 
		invoiceDemandEmail2,invoicePrice,invoiceTax, 
		invoiceNote,invoiceState,cash, 
		invoiceCheck,draft,accountsReceivable, 
		confirm,amendCheck,
		contractManageCode)
	VALUES 
		(#{invoiceCode},#{invoiceType}, #{invoiceRegDate}
		, '111-11-1111', '',
		 '2team404500', '이팀', '전북 전주시 덕진구',
		'전자상거래', '전자상거래', '404500@naver.com', 
		#{mainBusinessCodeDemand}, #{invoiceDemandBizNumber}, #{invoiceDemandNumber},
		#{invoiceDemand}, #{invoiceDemandName}, #{invoiceDemandAddr},
		#{invoiceDemandType1}, #{invoiceDemandType2}, #{invoiceDemandEmail1},
		#{invoiceDemandEmail2}, #{invoicePrice}, #{invoiceTax},
		#{invoiceNote}, '1)정상_발행완료', #{cash}, 
		#{invoiceCheck}, #{draft}, #{accountsReceivable}, 
		#{confirm}, #{amendCheck},
		 #{contractManageCode})
	</insert>
	
	<!--유경 -  세금계산서 세부발행 등록 -->
	<insert id="addDetailInvoiceByContract" parameterType="InvoiceList">
		INSERT INTO k0_invoiceDetail
			(invoiceDetailCode, invoiceCode, swIsCode,
			 invoiceDetailDate, invoiceDetailProduct,
			invoiceDetailStandard, invoiceDetailQty, invoiceDetail,
			invoiceDetailUnitPrice, invoiceDetailTax, invoiceDetailNote)
		VALUES 
			(#{invoiceDetailCode}, #{invoiceCode}, #{swIsCode},
			#{invoiceDetailDate}, #{invoiceDetailProduct}, #{invoiceDetailStandard},
			#{invoiceDetailQty}, #{invoiceDetail}, #{invoiceDetailUnitPrice},
			#{invoiceDetailTax}, #{invoiceDetailNote});
	</insert>
	
	<!-- 유경 수정세금계산서 발행 정보받아오기 -->
	<select id="getAmendInvoice" resultType="InvoiceList" >
				SELECT
					 *
				FROM
					k0_invoice AS i
				INNER join
					k0_invoiceDetail AS d
					on
					i.invoiceCode = d.invoiceCode
				WHERE i.invoiceCode = #{invoiceCode};
	</select>
	
	<!-- 유경 수정세금계산서 수정발행 -->
	<update id="amendInvoicByDefault" parameterType="InvoiceList">
	UPDATE k0_invoice
	SET
		amendCheck='Y',
		amendedInvoiceCode = #{amendedInvoiceCode}
	WHERE invoiceCode = #{invoiceCode};
	</update> 
	
	<!-- 유경 수정세금계산서 일반발행 1건 추가 발행 -->
	<insert id="addAmendInvoice" parameterType="InvoiceList">
	INSERT INTO k0_invoice 
		(invoiceCode, invoiceType, invoiceRegDate, 
		invoiceSupplyBizNumber, invoiceSupplyNumber, invoiceSupply, 
		invoiceSupplyName, invoiceSupplyAddr, invoiceSupplyType1, 
		invoiceSupplyType2, invoiceSupplyEmail, mainBusinessCodeDemand, 
		invoiceDemandBizNumber, invoiceDemandNumber, invoiceDemand, 
		invoiceDemandName, invoiceDemandAddr, invoiceDemandType1, 
		invoiceDemandType2, invoiceDemandEmail1, invoiceDemandEmail2, 
		invoicePrice, invoiceTax, invoiceNote, 
		invoiceState, cash, invoiceCheck, draft, 
		accountsReceivable, confirm, amendCheck, 
		amendedInvoiceCode, contractManageCode) 
	SELECT 
		#{addInvoiceCode}, #{invoiceType}, #{invoiceRegDate}, 
		invoiceSupplyBizNumber, invoiceSupplyNumber, invoiceSupply,
		 invoiceSupplyName, invoiceSupplyAddr, invoiceSupplyType1, 
		 invoiceSupplyType2, invoiceSupplyEmail, mainBusinessCodeDemand, 
		 invoiceDemandBizNumber, invoiceDemandNumber, invoiceDemand, 
		 invoiceDemandName, invoiceDemandAddr, invoiceDemandType1, 
		 invoiceDemandType2, invoiceDemandEmail1, invoiceDemandEmail2, 
		 #{invoicePrice}, #{invoiceTax}, #{invoiceNote}, 
		 invoiceState, #{cash}, invoiceCheck,
		  draft, accountsReceivable, confirm, 
		  'Y', #{amendedInvoiceCode}, contractManageCode 
	  FROM k0_invoice WHERE invoiceCode = #{invoiceCode};
	
	</insert>
	
	<!-- 유경 수정세금계산서 상세발행 1건 추가 발행 -->
	<insert id="addDetailAmendInvoice" parameterType="InvoiceList">
		INSERT INTO k0_invoiceDetail
			(invoiceDetailCode, invoiceCode, swIsCode, 
			invoiceDetailDate, invoiceDetailProduct, 
			invoiceDetailStandard, invoiceDetailQty,
			 invoiceDetail, invoiceDetailUnitPrice, 
			 invoiceDetailTax, invoiceDetailNote)
		SELECT 
			#{invoiceNewDetailCode}, #{addInvoiceCode}, #{swIsCode},
			#{invoiceDetailDate}, invoiceDetailProduct, 
			#{invoiceDetailStandard}, #{invoiceDetailQty},
			 #{invoiceDetail}, #{invoiceDetailUnitPrice}, 
			 #{invoiceDetailTax}, #{invoiceDetailNote}
		FROM k0_invoiceDetail
		WHERE invoiceDetailCode = #{invoiceDetailCode};
	</insert>
	
	<!-- 유경 - 개발사 통합회계 매출 대상 조회 -->
	<select id="addTotalAccountingIncome" resultType="SwTotalAccounting">
		SELECT
			GROUP_CONCAT(i.swIncomeCode) AS swIncomeCode,
			p.contractManageCode,
			i.swGroupSlip,
			SUM(p.servicePaymentAmount) AS servicePaymentAmount,
			t.swTotalCode,
			t.swGroupSlip as swTotalGroupSlip,
			t.swSalesSection,
			t.swTotalTable,
			t.swTotalPrice
		from
			k2_sw_income AS i
		INNER join
			k2_sw_paymentSum AS p
		on
		i.contractManageCode = p.contractManageCode	
		left join
			k2_sw_totalAccounting AS t
		ON
			i.swGroupSlip = t.swGroupSlip
		WHERE i.swIncomeCode is NOT NULL
			AND
			i.swIncomeFinish = 'Y'
		GROUP BY i.swGroupSlip
		ORDER BY (swTotalCode), swTotalCode DESC;
	</select>
	
	<!-- 유경 - 개발사 통합회계 매출 대상 등록  -->
	<insert id="addTotalByIncome"  parameterType="SwTotalAccounting">
	INSERT INTO k2_sw_totalAccounting
	(swTotalCode,
	 swGroupSlip,
	swSalesSection,
	swTotalTable,
	swTotalPrice)
	VALUES 
	((SELECT CONCAT('total_',LPAD(max(SUBSTRING((swTotalCode),8,3))+1,3,'0'))
				from
				k2_sw_totalAccounting AS t),
	#{swGroupSlip},
	#{swSalesSection},
	#{swTotalTable},
	#{swTotalPrice})
	</insert>
	
	<!-- 유경 - 개발사 통합회계 비용 대상 조회 -->
	<select id="addTotalAccountingExpense" resultType="SwTotalAccounting">
		SELECT
			GROUP_CONCAT(e.swExpensePayCode) AS swExpensePayCode,
			e.swGroupSlip AS swGroupSlip,
			SUM(e.swExpensePrice) AS swExpensePrice,
			t.swTotalCode,
			t.swGroupSlip AS swTotalGroupSlip,
			t.swSalesSection,
			t.swTotalTable,
			t.swTotalPrice
		from
			k2_sw_expense_pay AS e
		left join
			k2_sw_totalAccounting AS t
		ON
			e.swGroupSlip = t.swGroupSlip
		WHERE e.swGroupSlip is NOT NULL
		AND
			e.swExpenseFinish = 'Y'
		GROUP BY e.swGroupSlip
		ORDER BY (swTotalCode), swTotalCode DESC;
	</select>
	
	<insert id="addTotalByExpense" parameterType="SwTotalAccounting">
		INSERT INTO k2_sw_totalAccounting
			(swTotalCode,
			 swGroupSlip,
			swSalesSection,
			swTotalTable,
			swTotalPrice)
		VALUES 
			((SELECT CONCAT('total_',LPAD(max(SUBSTRING((swTotalCode),8,3))+1,3,'0'))
						from
						k2_sw_totalAccounting AS t),
			#{swGroupSlip},
			#{swSalesSection},
			#{swTotalTable},
			#{swTotalPrice})
	</insert>
	
	<!-- 유경- 개발사 통합회계 조회 2021년 매출, 비용 -->
	<select id="selectTotalAccounting" resultType="SwTotalAccounting">
		SELECT
			DISTINCT((SELECT
			SUM(t.swTotalPrice)
			from
			k2_sw_totalAccounting AS t
			WHERE
			substring(swGroupSlip,12,2) = 21
			AND
			t.swSalesSection = '매출')) AS sales2021,
			(SELECT
			SUM(t.swTotalPrice)
			from
			k2_sw_totalAccounting AS t
		WHERE
			substring(swGroupSlip,12,2) = 21
		AND
			t.swSalesSection = '비용') AS expense2021
		FROM
			k2_sw_totalAccounting
	</select>

</mapper>