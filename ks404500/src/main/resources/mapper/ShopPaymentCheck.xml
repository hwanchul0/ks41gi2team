<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ksmart41_teamtest.mapper.ShopPaymentCheckMapper">
	<resultMap type="ShopPaymentCheck" id="ShopPaymentCheckResultMap">
		<result column="shopPaymentCheckCode"					property="shopPaymentCheckCode"/>
		<result column="shopConsumerId"							property="shopConsumerId"/>
		<result column="shopMemberId"							property="shopMemberId"/>
		<result column="paymentStateCode"						property="paymentStateCode"/>
		<result column="shopPaymentCode"							property="shopPaymentCode"/>
		<result column="shopPaymentCharge"						property="shopPaymentCharge"/>
		<result column="shopPaymentBalance"						property="shopPaymentBalance"/>
		<result column="paymentType"							property="paymentType"/>
		<result column="shopPaymentDate"						property="shopPaymentDate"/>
		<result column="shopPaymentAmount"						property="shopPaymentAmount"/>
	
	
	</resultMap>
	<select id="getShopPaymentCheck" parameterType="String" resultType="ShopPaymentCheck">
		SELECT
		p.shopPaymentCheckCode,
		p.shopPaymentCode,
		s.shopPaymentAmount,
		p.shopConsumerId,
		p.shopMemberId,
		p.paymentStateCode,
		p.paymentType,
		p.shopPaymentDate
	FROM
		k2_shop_paymentCheck AS p
		inner join 
		k2_shop_paymentSum AS s
	ON	
		p.shopPaymentCode = s.shopPaymentCode
	ORDER BY 
		 p.shopPaymentDate DESC; 
	
	</select>
	
	<insert id ="addPaymentCheck" parameterType="ShopPaymentCheck">
		INSERT INTO k2_shop_paymentCheck(
		shopPaymentCheckCode,
			shopConsumerId,
			paymentStateCode,
			paymentType,
			shopPaymentCharge,
			shopPaymentCode,
			shopPaymentDate
		)VALUES(
			 (SELECT
				max(shopPaymentCheckCode+1)
				FROM
				k2_shop_paymentCheck ALIAS_FOR_SUBQUERY ),
			#{shopConsumerId},
			#{paymentStateCode},
			#{paymentType},
			#{shopPaymentCharge},
			#{shopPaymentCode},
			#{shopPaymentDate}
		
		);
	</insert>
	<!--  유성 쇼핑몰 결제 등록 -->
	
	<select id="getAddShopAddPaymentCheck"  parameterType="String" resultType="ShopPaymentCheck">
	SELECT
		if(ISNULL(p.shopPaymentCheckCode), '등록대상','등록완료') AS addPaymentCheck,
		p.shopPaymentCheckCode,
		c.shopPaymentCode,
		c.shopPaymentAmount,
		o.shopConsumerId,
		o.shopMemberId,
		p.paymentStateCode,
		p.paymentType,
		p.shopPaymentDate
	from
		k2_shop_paymentCheck AS p
		right join
		k2_shop_paymentSum AS c
	ON
		p.shopPaymentCode = c.shopPaymentCode
	INNER JOIN
		k2_shop_order AS o
	on
		o.shopSlipNumber = c.shopSlipNumber
	GROUP by c.shopSlipNumber
	ORDER BY (p.shopPaymentCheckCode IS not NULL),
		 cast(p.shopPaymentCheckCode AS integer);
	</select>

	<!--  유성 쇼핑몰 결제 삭제 -->
	<delete id="deletePaymentCheck" parameterType="ShopPaymentCheck">
		DELETE
		FROM
			k2_shop_paymentCheck
		WHERE
			shopPaymentCheckCode = #{shopPaymentCheckCode};
	
	</delete>
	<!-- 유성 쇼핑몰 결제 수정하기 -->
	<update id="ShopModifyPaymentCheck" parameterType="ShopPaymentCheck">
		UPDATE k2_shop_paymentCheck
			SET
				paymentStateCode =#{paymentStateCode}
			WHERE
				shopPaymentCheckCode =#{shopPaymentCheckCode};
	
	</update>
	<!--  유성 쇼핑몰 결제 값가져오기 -->
	<select id="getModifyPaymentCheck" resultType="ShopPaymentCheck">
		SELECT
		shopPaymentCheckCode,
		shopPaymentCode,
		shopPaymentCharge,
		shopConsumerId,
		shopMemberId,
		paymentStateCode,
		paymentType,
		shopPaymentDate
	FROM
		k2_shop_paymentCheck
	WHERE
		shopPaymentCheckCode = #{shopPaymentCheckCode};
	
	</select>
	
</mapper>